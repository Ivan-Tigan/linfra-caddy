services:
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # HTTP/3
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    network_mode: host
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:2019/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Initialization job to reload Caddyfile once on 'docker compose up'
  caddy-init-reload:
    image: docker:cli
    # Use 'none' or another network mode if 'host' isn't strictly necessary for the client,
    # but 'host' ensures it can talk to Caddy's admin API on localhost:2019 if you use that.
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # This service will run its command and then exit (it won't 'restart').
    entrypoint: /bin/sh
    command:
      - -c
      - |
        echo "Waiting for Caddy service to be healthy..."
        # Wait up to 60 seconds for the 'caddy' service to report 'healthy'
        docker compose wait caddy --timeout 60 --interval 2s --state healthy

        # Once healthy, execute the reload command
        if [ $? -eq 0 ]; then
          echo 'Caddy service is healthy. Reloading Caddyfile...'
          docker compose exec -T caddy caddy reload --config /etc/caddy/Caddyfile --force 2>&1
          echo 'Reload complete.'
        else
          echo 'Caddy service failed to become healthy. Skipping reload.'
          exit 1
        fi
    # Depends on caddy to ensure it tries to run *after* caddy starts
    depends_on:
      caddy:
        condition: service_started

volumes:
  caddy_data:
  caddy_config:
