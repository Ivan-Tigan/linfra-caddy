services:
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # HTTP/3
    volumes:
      # Caddy needs access to the Caddyfile to load it from disk
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    network_mode: host
    healthcheck:
      # Caddy Admin API is accessible on localhost:2019
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:2019/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Reload job using Caddy's Admin API
  caddy-api-reload:
    # Use a minimal image with curl for the API call
    image: curlimages/curl:latest
    restart: "no" # Ensures it runs on every 'up' and immediately exits
    # Must use 'host' to access Caddy's Admin API on localhost:2019
    network_mode: host
    volumes:
      # Only need to mount the Caddyfile that will be posted
      - ./Caddyfile:/tmp/Caddyfile:ro
    entrypoint: /bin/sh
    command:
      - -c
      - |
        API_ENDPOINT="http://localhost:2019/load"
        CADDYFILE_PATH="/tmp/Caddyfile"

        echo "Waiting for Caddy Admin API to be available..."

        # Wait for the Caddy API to respond on port 2019
        for i in $(seq 1 15); do
          if curl --fail -s -o /dev/null "$API_ENDPOINT"; then
            echo "Caddy Admin API is ready. Proceeding with configuration load."
            break
          fi
          echo "Waiting for Caddy API (Attempt $i of 15)..."
          sleep 2
        done

        if [ $i -lt 15 ]; then
          echo "Sending new Caddyfile to $API_ENDPOINT..."
          
          # The API call: POST the Caddyfile content with the Caddyfile Content-Type
          RESPONSE=$(curl -X POST \
            -H "Content-Type: text/caddyfile" \
            --data-binary "@$CADDYFILE_PATH" \
            "$API_ENDPOINT")
          
          CURL_STATUS=$?
          
          if [ $CURL_STATUS -eq 0 ]; then
            echo "API Reload successful."
            exit 0 # Success
          else
            echo "API Reload failed! Curl exit status: $CURL_STATUS"
            echo "Caddy API Response: $RESPONSE"
            exit 1 # Failure
          fi
        else
          echo "Caddy Admin API failed to become available. Skipping reload."
          exit 1 # Failure
        fi
    depends_on:
      caddy:
        condition: service_started

volumes:
  caddy_data:
  caddy_config:
